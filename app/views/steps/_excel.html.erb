<div id="myExcelDiv" style="width: 600px; height: 540px; margin: 0 auto"></div>
<script type="text/javascript" src="http://r.office.microsoft.com/r/rlidExcelWLJS?v=1&kip=1"></script>
<script type="text/javascript">
    /*
    * This code uses the Microsoft Office Excel JavaScript object model to programmatically insert the
    * Excel Web App into a div with id=myExcelDiv. The full API is documented at
    * http://msdn.microsoft.com/en-us/library/hh315812.aspx. There you can find out how to programmatically get
    * values from your Excel file and how to use the rest of the object model. 
    */

    // Use this file token to reference Book1.xlsx in the Excel APIs
    var fileToken = gon.excel_link;
    var ewa = null;

    // Run the Excel load handler on page load.
    if (window.attachEvent)
    {
        window.attachEvent("onload", loadEwaOnPageLoad);
    } else
    {
        window.addEventListener("DOMContentLoaded", loadEwaOnPageLoad, false);
    }

    function loadEwaOnPageLoad()
    {
        var props = {
            uiOptions: {
                showGridlines: true,
                showRowColumnHeaders: true,
                showParametersTaskPane: true
            },
            interactivityOptions: {
                allowTypingAndFormulaEntry: true,
                allowParameterModification: true,
                allowSorting: false,
                allowFiltering: false,
                allowPivotTableInteractivity: false
            }
        };
        // Embed workbook using loadEwaAsync
        Ewa.EwaControl.loadEwaAsync(fileToken, "myExcelDiv", props, onEwaLoaded);
    }

    function onEwaLoaded(asyncResult)
    { 
        if (asyncResult.getSucceeded())
        {
            // Use the AsyncResult.getEwaControl() method to get a reference to the EwaControl object
            ewa = asyncResult.getEwaControl();
        }
        else
        {
            alert("Async operation failed!");
        }
        // ...
    }

	function execute()
	{

		 //get the current sheet name and build the range address in A1 notation
		var currentSheet = ewa.getActiveWorkbook().getActiveSheet().getName();
	
	    // Get unformatted range values (getValuesAsync(0,...) where 0 = Ewa.ValuesFormat.Unformatted)
	  var cell = "0,0"

	  var commaIndex = cell.indexOf(",");
      var row = parseInt(cell.substring(0, commaIndex));
      var column = parseInt(cell.substring(commaIndex + 1))
      var range = ewa.getActiveWorkbook().getRange(currentSheet,row,column,row+1,column+1);
      range.getValuesAsync(1, getRangeValues, null)
	}     
	 
	function getRangeValues(asyncResult)
	{
	    // Get the value from asyncResult if the asynchronous operation was successful.
	    if (asyncResult.getCode() == 0)
	    {
	        // Get the value in active cell (located at row 0, column 0 of the
	        // range which consists of a single cell (the "active cell")).
			var cellValue = asyncResult.getReturnValue()[0][0];
	        alert(cellValue);
	    }
	    else 
	    {
	          alert("Operation failed with error message " + asyncResult.getDescription() + ".");
	    }    
	}



    // Handle the active cell changed event.
    function cellChanged(rangeArgs)
    {
        // Use the RangeEventArgs object to get information about the range.
        var sheetName = rangeArgs.getRange().getSheet().getName();
        var col = rangeArgs.getRange().getColumn();
        var row = rangeArgs.getRange().getRow();
        var value = rangeArgs.getFormattedValues();
        alert("The active cell is located at row " + (row + 1) + " and column " + (col + 1) + " with value '" + value + "'.");
        // ...
    }
</script>

<%= link_to_function "check", 'execute();', class: "btn btn-danger btn-mini remove_fields "%>